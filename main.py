import os
import logging
from datetime import datetime
from typing import Dict, Tuple, Any
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import asyncio 
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import shlex

logging.basicConfig(level=logging.INFO)

from dotenv import load_dotenv
load_dotenv()
bot = Bot(token=os.getenv('BOT_TOKEN'))

storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
scheduler = AsyncIOScheduler()

disputes: Dict[Tuple[int, str], Dict[str, Any]] = {}



@dp.message(Command('how_to_use'))
async def how_to_use(message: types.Message):
    await message.reply(
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π:\n"
        "`/create_dispute  '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–∞' '–û–ø–∏—Å–∞–Ω–∏–µ, –∫—Ä–∏—Ç–µ—Ä–∏–∏' '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞–≤–æ–∫' '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø–æ—Ä–∞'`\n\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: `'{datetime.now().strftime('%Y-%m-%d %H:%M')}'`\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä:\n"
        "`/create_dispute '–ü–æ–≥–æ–¥–∞ 25 –º–∞—è' '–ë—É–¥–µ—Ç –¥–æ–∂–¥—å –≤ –ú–æ—Å–∫–≤–µ' '2024-05-24 20:00' '2024-05-25 20:00'`\n\n"
        "–î–ª—è —Å—Ç–∞–≤–∫–∏:\n"
        "`/bet –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–æ—Ä–∞ [T/F] –°—É–º–º–∞`\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/bet '–ü–æ–≥–æ–¥–∞ 25 –º–∞—è' T 1000`\n\n"
        "–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
        "`/vote –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–æ—Ä–∞ [T/F]`\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/vote '–ü–æ–≥–æ–¥–∞ 25 –º–∞—è' F`",
        parse_mode="MarkdownV2"
    )

@dp.message(Command("list_disputes"))
async def list_disputes(message: types.Message):
    chat_id = message.chat.id
    current_disputes = [
        dispute for (cid, name), dispute in disputes.items() 
        if cid == chat_id
    ]

    if not current_disputes:
        await message.reply("üö´ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤")
        return

    response = ["üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤:\n"]
    
    for dispute in current_disputes:
        response.append(
            f"‚ñ´Ô∏è *{dispute['name']}*\n"
            f"‚îú –û–ø–∏—Å–∞–Ω–∏–µ: {dispute['description']}\n"
            f"‚îú –°—Ç–∞–≤–∫–∏ –¥–æ: {dispute['end_bet_time'].strftime('%Y-%m-%d %H:%M')}\n"
            f"‚îî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {dispute['end_dispute_time'].strftime('%Y-%m-%d %H:%M')}\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    full_message = "\n".join(response)
    for part in [full_message[i:i+4096] for i in range(0, len(full_message), 4096)]:
        await message.answer(part, parse_mode="Markdown")





async def resolve_dispute(chat_id: int, name: str):
    key = (chat_id, name)
    if key not in disputes:
        return

    dispute = disputes[key]
    """
    if datetime.now() < dispute['end_dispute_time']:
        return
    """

    if not dispute['votes']:
        await bot.send_message(chat_id, f"–°–ø–æ—Ä '{name}' –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω: –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤.")
        # TODO —á—Ç–æ —Ç–æ –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        return

    t_votes = sum(1 for v in dispute['votes'].values() if v)
    f_votes = len(dispute['votes']) - t_votes

    t_bets_sum = sum(b["sum"] for b in dispute['bets'] if b["on"]=='T')
    f_bets_sum = sum(b["sum"] for b in dispute['bets'] if b["on"]=='F')

    msg=f"–°–ø–æ—Ä {dispute["name"]} –∑–∞–≤–µ—Ä—à–µ–Ω!\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"

    # TODO –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–ª–µ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
    if t_bets_sum == 0 or f_bets_sum == 0:
        await bot.send_message(chat_id, "–º–æ–∂–Ω–æ –ø–æ–∫–∞ –±–µ–∑ –Ω—É–ª–µ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø–∂")
        return

    for i in range(len(dispute['bets'])):
        b = dispute['bets'][i]
        dispute['bets'][i].result = (t_votes/(t_votes + f_votes) if b["on"]=='T' else f_votes/(t_votes + f_votes)) *\
        (b["sum"] + (b["sum"]/(t_bets_sum if b["on"]=='T' else f_bets_sum)) *\
        (f_bets_sum if b["on"]=='T' else t_bets_sum))
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –Ω–∏–∫–∞ –≤–º–µ—Å—Ç–æ id
        msg += f"üë§ {b["uid"]} –ø–æ–ª—É—á–∞–µ—Ç {dispute['bets'][i]["result"]} \n"
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–Ω –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫

    await bot.send_message(chat_id, msg)
    del disputes[key]


@dp.message(Command('create_dispute'))
async def create_disput(message: types.Message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
        args = shlex.split(message.text)[1:] 
    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
        return
    
    if len(args) < 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_disput [–∏–º—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] [–∫–æ–Ω–µ—Ü_—Å—Ç–∞–≤–æ–∫] [–∫–æ–Ω–µ—Ü_—Å–ø–æ—Ä–∞]")
        return

    name, desc = args[0], ' '.join(args[1:-2])
    try:
        end_bet = datetime.strptime(args[-2], '%Y-%m-%d %H:%M')
        end_disp = datetime.strptime(args[-1], '%Y-%m-%d %H:%M')
    except ValueError:
        await message.reply("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return

    if end_bet >= end_disp:
        await message.reply("–ö–æ–Ω–µ—Ü —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞ —Å–ø–æ—Ä–∞.")
        return
    
    if end_bet <= datetime.now() or end_disp <= datetime.now():
        await message.reply("–ö–æ–Ω–µ—Ü —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.")
        return

    chat_id = message.chat.id
    key = (chat_id, name)
    if key in disputes:
        await message.reply("–°–ø–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    disputes[key] = {
        'name': name,
        'description': desc,
        'end_bet_time': end_bet,
        'end_dispute_time': end_disp,
        'bets': [], # {on: (T/F), uid, sum, result}
        'votes': {},
        'chat_id': chat_id,
    }

    # TODO –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –∏ –æ –∫–æ–Ω—Ü–µ —Å–ø–æ—Ä–∞ –∑–∞ n –º–∏–Ω—É—Ç
    scheduler.add_job(
        resolve_dispute, 
        'date',
        run_date=end_disp,
        args=[chat_id, name],
        misfire_grace_time=60,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏–µ –¥–æ 60 —Å–µ–∫
        coalesce=True,          # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω—É
        id=f"resolve_{chat_id}_{name}")
    
    await message.reply(f"–°–ø–æ—Ä '{name}' —Å–æ–∑–¥–∞–Ω.\n–°—Ç–∞–≤–∫–∏ –¥–æ {end_bet.strftime('%Y-%m-%d %H:%M')}.\n–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ø–æ—Ä–∞: {end_disp.strftime('%Y-%m-%d %H:%M')}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}")

@dp.message(Command('bet'))
async def bet(message: types.Message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
        args = shlex.split(message.text)[1:] 
    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
        return
    
    if len(args) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bet [–∏–º—è] [T/F] [—Å—É–º–º–∞]")
        return

    name, var, sum_str = args
    if var not in ('T', 'F'):
        await message.reply("–í–∞—Ä–∏–∞–Ω—Ç: T –∏–ª–∏ F.")
        return

    try:
        bet_sum = float(sum_str)
        if bet_sum <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0.")
        return

    key = (message.chat.id, name)
    if key not in disputes:
        await message.reply("–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    dispute = disputes[key]
    if datetime.now() > dispute['end_bet_time']:
        await message.reply("–í—Ä–µ–º—è —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ.")
        return


    uid = message.from_user.id
    existing_bet = next((b for b in dispute['bets'] if b['uid'] == uid and b['on'] == var), None)
    
    if existing_bet:
        existing_bet['sum'] += bet_sum
        existing_bet['result'] += bet_sum
    else:
        dispute['bets'].append({
            'uid': uid,
            'on': var,
            'sum': bet_sum,
            'result': bet_sum
        })

    # TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–Ω –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    
    msg = "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏:\n"
    for b in dispute['bets']:
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –Ω–∏–∫–∞ –≤–º–µ—Å—Ç–æ id
        msg += f"üë§ {b["uid"]} —Å—Ç–∞–≤–∏—Ç {b["sum"]} –Ω–∞ {"—É—Å–ø–µ—Ö" if b["on"] == 'T' else "–Ω–µ—É–¥–∞—á—É"}\n"

    await message.reply(msg)


@dp.message(Command('vote'))
async def vote(message: types.Message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
        args = shlex.split(message.text)[1:] 
    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
        return
    
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /vote [–∏–º—è] [T/F]")
        return

    name, var = args
    if var not in ('T', 'F'):
        await message.reply("–í–∞—Ä–∏–∞–Ω—Ç: T –∏–ª–∏ F.")
        return

    key = (message.chat.id, name)
    if key not in disputes:
        await message.reply("–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    dispute = disputes[key]
    now = datetime.now()
    if now < dispute['end_bet_time'] or now > dispute['end_dispute_time']:
        await message.reply("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    uid = message.from_user.id

    user_has_bet = any(b['uid'] == uid for b in dispute['bets'])
    if user_has_bet:
        await message.reply("–°—Ç–∞–≤–∏–≤—à–∏–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.")
        return

    dispute['votes'][uid] = (var == 'T')
    await message.reply("–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω.")



async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())